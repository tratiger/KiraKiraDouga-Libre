@use "sass:list" as -list; // noscriptモジュールでインポートする際に未定義のバグが発生するのを修正
@use "sass:map" as -map;
@use "sass:meta" as -meta;
@use "theme/colors" as *;
@use "theme/internal" as *;
@use "theme/functions" as *;

// すべてのプリセットカラーをルート要素の下に配置して呼び出しやすくします。下のクラスと結合しないのは、出力時に:rootを1つだけ含めるためです。
:root {
	@each $palette, $color in $palette {
		--#{"" + $palette}: #{$color};
	}
}

// プリセットカラーをクラスで直接使用できるようにします。
@each $palette, $color in $palette {
	.#{"" + $palette} {
		--accent-50: var(--#{$palette});
	}
}

// force-colorは、特定の要素のアクセントカラーを強制的に指定し、グローバル設定に従わないようにするために使用します。
// これはCSS変数の特性に対応するためです。これらを追加しないと、要素内で直接--accentを上書きしても差分を変更できません。
// このQ&Aが参考になります：https://segmentfault.com/q/1010000044508638
// lightの場合に:rootを含めるのは、htmlタグにテーマが指定されていない場合（JavaScriptが無効になっている場合など）に色が完全に消えてしまう問題を回避するためです。
@for $i from 1 through 2 {
	$is-light: $i == 1;
	$selector: if(
		$is-light,
		".light, .light .force-color, :root:not(.dark)",
		".dark, .dark .force-color"
	);

	#{$selector} {
		color-scheme: if($is-light, light, dark);
		accent-color: var(--accent);

		// ニュートラルカラーとグレースケールカラー
		@each $colors in $neutral-colors, $grayscale-colors {
			@each $key, $color in $colors {
				@include hex-or-rgb-color($key, $color, $is-light);
			}
		}

		@each $state, $color in $state-colors {
			@if -meta.type-of($color) != list {
				--#{$state}: #{c($color)};
			} @else {
				--#{$state}: #{c(-list.nth($color, 1), -list.nth($color, 2))};
			}
		}

		// 混合色（--accentの差分）
		@each $state, $colors in $mixed-colors {
			@if -list.length($colors) >= 2 {
				$mixed-color: -list.nth($colors, $i);

				@if -list.length($mixed-color) == 1 {
					--#{$state}: #{$mixed-color};
				} @else {
					--#{$state}: color-mix(in oklab, var(--accent-50), #{$mixed-color});
				}
			}
		}

		// @include wave-link($key, $color, $is-light); // TODO: 波線リンクのカラースタイルは一時的に保留します。完了後、hyperlink.scssのコメントを解除してください。
	}
}

:root.wallpaper {
	--accent-50: var(--accent-wallpaper, #{-map.get($palette, pink)});
}

@use "sass:color";
@use "sass:list";
@use "sass:string";
@use "sass:math";

/// 指定された色の輝度を反転させます。
/// @param {Color} $color - カラー値。
/// @return {Color} 輝度を反転させた後のカラー値。
@function invert-lightness($color) {
	$lightness: 100% - color.lightness($color);
	@return hsla(color.hue($color), color.saturation($color), $lightness, color.alpha($color));
}

/// Sassマップのキー名をCSSプロパティ名に変換します。
/// @param {String} $key - Sassマップのキー名。
/// @return {String} CSSプロパティ名。
@function key-to-css-var($key) {
	@return string.unquote($string: "--" + $key);
}

/// カラー値の「#」をエスケープし、background url data svgに配置します。
/// @param {Color} $color - カラー値。
/// @return {String} SVG内のエスケープされたカラー値。
@function color-to-svg-color($color) {
	@return string.unquote("%23" + string.slice(#{$color}, -6)); // $color 変数はカラー型なので、文字列型に変換してから使用する必要があります。
}

/// カラー（例：`#f00`）をRGBリスト（例：`255, 0, 0`）に変換し、rgba関数の呼び出しを容易にします。
/// @param {Color} $color - カラー値。
/// @return {List} RGB3色のリスト。
@function color-to-rgb-list($color) {
	@return color.red($color), color.green($color), color.blue($color);
}

/// テーマカラーを呼び出します。
/// @param {String} $css-var-name - カラーのCSSプロパティ名。「--」を前に付ける必要はありません。whiteまたはblackも可能です。
/// @param {Number | null} $alpha [null] - アルファ値。パーセンテージまたは0から1の間の小数で指定できます。パーセンテージを推奨します。空の場合は不透明色を意味します。
/// @return {Color} varで呼び出されるカスタムプロパティの純色、またはrgbaでカプセル化された透明色を返します。
@function c($css-var-name, $alpha: null) {
	$color: if($css-var-name == white or $css-var-name == black, $css-var-name, var(--#{$css-var-name}));

	@if not $alpha {
		@return $color;
	} @else {
		@return color-mix(in oklab, $color, transparent (100 - $alpha));
	}
}

/// #### 不正確な温度計
/// ある数値を一つのスケール単位から別のスケール単位に変換します。新旧の単位は線形関係にありますが、必ずしも正比例するわけではありません。例えば、摂氏と華氏の関係のように、対応する新しい値を返します。
/// 例えば、0〜255の範囲のカラー値を0〜100の値に変換します。
/// @param {Number} $x - 変換前の元のスケール数値。
/// @param {Number} $min - 元のスケール値（小）。
/// @param {Number} $max - 元のスケール値（大）。
/// @param {Number} $a - 新しいスケール値（小）。
/// @param {Number} $b - 新しいスケール値（大）。
/// @param {Number} $css-calc [false] - trueの場合、CSSランタイムベースの計算式を返します。
/// @return {Number} 変換後の新しいスケール数値。
@function map($x, $min, $max, $a, $b, $css-calc: false) {
	@if not $css-calc {
		@return calc(($b - $a) * ($x - $min) / ($max - $min)) + $a;
	} @else {
		@return calc((($b - $a) * ($x - $min) / ($max - $min)) + $a);
	}
}

/// リストの各項目の符号を反転させます。
/// @example scss
/// 	margin: list-negative(1rem 2rem);
/// 	// result
/// 	margin: -1rem -2rem;
/// @param {List} $list - リスト。
/// @return {List} 符号を反転させた後のリスト。
@function list-negative($list) {
	@for $i from 1 through list.length($list) {
		$list: list.set-nth($list, $i, -(list.nth($list, $i)));
	}
	@return $list;
}

/// 文字列を指定された回数繰り返します。
/// @param {String} $str - 文字列。
/// @param {Number} $count - 繰り返す回数。
/// @return {String} 指定された回数繰り返した後の文字列。
@function string-repeat($str, $count) {
	$result: "";

	@for $i from 1 through $count {
		$result: $result + $str;
	}

	@return $result;
}

/// `$string` 内の `$search` を `$replace` に置き換えます。
/// @param {String} $string - 元の文字列。
/// @param {String} $search - 置き換える部分文字列。
/// @param {String} $replace [""] - 新しい値。
/// @return {String} 更新後の文字列。
@function string-replace($string, $search, $replace: "") {
	$index: string.index($string, $search);

	@if $index {
		@return string.slice($string, 1, $index - 1) + $replace + string-replace(string.slice($string, $index + string.length($search)), $search, $replace);
	}

	@return $string;
}

/// 指定された2つの数の間の乱数を生成します。
/// @param {Number} $min - 最小値。
/// @param {Number} $max - 最大値。
/// @param {Bool} $is-int [true] - 少数ではなく整数を返す必要がありますか？デフォルトは整数です。
/// @return {Number} 範囲内の乱数。
@function rand-between($min, $max, $is-int: true) {
	@if $is-int {
		@return math.random($max + 1 - $min) + $min;
	} @else {
		@return math.random() * ($max - $min) + $min;
	}
}

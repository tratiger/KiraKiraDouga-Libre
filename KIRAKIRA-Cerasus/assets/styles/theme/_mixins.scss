@use "sass:map";
@use "sass:list";
@use "sass:math";
@use "variables" as *;
@use "internal" as *;
@use "functions" as *;
@use "eases";

/// ワンキーでflexレイアウトと中央揃え (flex - center - center)。
/// @output display, align-items, justify-content
@mixin flex-center {
	display: flex;
	justify-content: center;
	align-items: center;
}

/// ワンキーでgridレイアウトと中央揃え (grid - center)。
/// @output display, place-items
@mixin grid-center {
	display: grid;
	place-items: center;
}

/// 正方形にします。幅と高さが等しくなります。
/// @param {Number} $size - 長さ。
/// @param {Boolean} $with-size-var [false] - 他のコンポーネントがサイズを簡単に変更できるように、`--size` という名前のCSSカスタムプロパティを生成しますか？
/// @output width, height
@mixin square($size, $with-size-var: false) {
	@if not $with-size-var {
		width: $size;
		height: $size;
	} @else {
		--size: #{$size};
		width: var(--size);
		height: var(--size);
	}
}

/// 楕円形にします。
/// border-radiusを非常に大きな値に設定します。
/// @param {String} $position [full] - 角丸の位置。
/// @output border-radius
@mixin oval($position: full) {
	@include set-border-radius(calc(infinity * 1px), $position);
}

/// 円形にします。
/// border-radiusを100%に設定します。
/// @param {String} $position [full] - 角丸の位置。
/// @output border-radius
@mixin circle($position: full) {
	@include set-border-radius(100%, $position);
}

/// 塗りつぶされた正三角形を描画します。
/// @param {type} $length - 辺の長さ。
/// @param {type} $fill - 塗りつぶしの色。
/// @param {type} $arrow [up] - 三角形の矢印の向き。選択可能な値：up | down | left | right。
/// @output width, height, border-top, border-right, border-bottom, border-left
@mixin triangle($length, $fill, $arrow: up) {
	@include square(0);

	$arrow-to-border: (
		up: border-bottom border-top,
		down: border-top border-bottom,
		top: border-bottom border-top,
		bottom: border-top border-bottom,
		left: border-right border-left,
		right: border-left border-right,
	);
	$border-correct: map.get($arrow-to-border, $arrow);
	$border-this: list.nth($border-correct, 1);
	$border-that: list.nth($border-correct, 2);

	@each $side in border-top, border-right, border-bottom, border-left {
		@if $side == $border-this {
			#{$side}: calc($length / 2 * math.sqrt(3)) solid $fill;
		} @else if $side == $border-that {
			#{$side}: none;
		} @else {
			#{$side}: calc($length / 2) solid transparent;
		}
	}
}

/// 要素を画面全体に広げます。
/// 幅と高さを両方ともビューポートの幅と高さの100%に設定します。
/// @param {String} $position [fixed] - 要素のpositionプロパティを指定します。
/// @output width, height
@mixin fullscreen($position: fixed) {
	position: $position;
	top: 0;
	left: 0;
	width: 100dvw;
	height: 100dvh;
	transition: $fallback-transitions, width 0s, height 0s;
}

/// blockレイアウトは要素間に意図しない隙間を作ることがあるので、flexを使いましょう。
/// @deprecated 画像や動画などのインライン要素が原因であることが判明したため、正しい方法で問題を解決し、このミックスインは非推奨となりました。
/// @output display, flex-direction
// @mixin flex-block {
// 	display: flex;
// 	flex-direction: column;
// }

/// 垂直方向の余白をなくします。高さのアニメーションに便利です。
/// @param {Bool} $padding [true] - padding値を調整します。
/// @param {Bool} $margin [true] - margin値を調整します。
/// @output margin-top, margin-bottom, padding-top, padding-bottom
@mixin no-vertical-spacing($padding: true, $margin: true) {
	@if $margin {
		margin-top: 0;
		margin-bottom: 0;
	}

	@if $padding {
		padding-top: 0;
		padding-bottom: 0;
	}
}

/// 水平方向の余白をなくします。幅のアニメーションに便利です。
/// @param {Bool} $padding [true] - padding値を調整します。
/// @param {Bool} $margin [true] - margin値を調整します。
/// @output margin-right, margin-left, padding-right, padding-left
@mixin no-horizontal-spacing($padding: true, $margin: true) {
	@if $margin {
		margin-right: 0;
		margin-left: 0;
	}

	@if $padding {
		padding-right: 0;
		padding-left: 0;
	}
}

/// flexレイアウトでoverflowを有効にしてスクロールした後、ページの末尾のマージンが消える問題を修正します。
/// flexレイアウトのafter疑似要素で使用します。
/// @example scss
/// 	.flex {
/// 		@include fix-page-end-padding;
/// 	}
/// @param {Bool} $zero-height [true] - 高さをゼロに設定します。場合によっては、これを無効にするとレイアウトの崩れを解決できることがあります。
/// しかし、一概には言えません。常に無効にすると、他の部分でレイアウトが崩れる可能性があるため、必要に応じて有効にするしかありません。とにかく、この部分は謎です。
/// @output display, clear, height, visibility, content
@mixin fix-page-end-padding($zero-height: true) {
	&::after {
		content: "."; // 内容は空にできません。
		display: block;
		clear: both;
		visibility: hidden; // プレースホルダーですが、非表示です。

		@if $zero-height {
			height: 0;
		}
	}
}

/// 幅/高さが不明な要素の絶対配置による中央揃え。
/// @param {String} $position [absolute] - 要素のpositionプロパティを指定します。absoluteまたはfixedである必要があります。
/// @param {Bool} $use-translate [true] - transformの代わりにtranslateを使用します。デフォルトはtrueで、falseにするとより多くのカスタム変換が可能になります。
/// @output position, top, left, translate, transform
@mixin absolute-center($position: absolute, $use-translate: true) {
	position: $position;
	top: 50%;
	left: 50%;

	@if $use-translate {
		translate: -50% -50%;
	} @else {
		transform: translate(-50%, -50%);
	}
}

/// 幅/高さが既知の要素の絶対配置による中央揃え。
/// NOTE: このミックスインを使用するには、幅と高さを指定する必要があります。
/// @param {String} $position [absolute] - 要素のpositionプロパティを指定します。absoluteまたはfixedである必要があります。
/// @output position, top, right, bottom, left, margin
@mixin absolute-center-sized($position: absolute) {
	position: $position;
	inset: 0;
	margin: auto;
}

/// Material Designの大きなリップル効果をボタンに適用する際、リップルがボタンのクリック領域を広げないようにします。
/// @param {Number} $button-size - クリック領域のボタンサイズ。
/// @output pointer-events
@mixin ripple-clickable-only-inside($button-size) {
	> * {
		pointer-events: none;

		&:not([disabled])::before {
			@include square($button-size);
			content: "";
			position: absolute;
			display: block;
			pointer-events: auto;
		}
	}
}

/// 純粋なCSSで、幅/高さを0からautoに変化させるアニメーションを可能にします。
/// @param {String} $specified [null] - アニメーションさせる方向を明示的に指定します。指定可能な値は `height` | `width` |
/// `both` です。空の場合は自動的にアニメーション効果は追加されません。
/// @param {Bool} $adjust-padding [true] - アニメーション中にpadding値を自動調整しますか？
/// @param {String} $transition-name [v] - Vue Transitionの名前。デフォルトは `v` です。
/// @output display, grid-template-rows, overflow
@mixin animated-auto-size($specified: null, $adjust-padding: true, $transition-name: v) {
	display: grid;
	grid-template-rows: 1fr;
	grid-template-columns: 1fr;

	> :deep(*) {
		overflow: hidden;
	}

	@if $specified {
		&.#{$transition-name}-enter-from,
		&.#{$transition-name}-leave-to {
			@if $specified == height or $specified == both {
				@include no-vertical-spacing($adjust-padding);
				grid-template-rows: 0fr;
			}

			@if $specified == width or $specified == both {
				@include no-horizontal-spacing($adjust-padding);
				grid-template-columns: 0fr;
			}
		}
	}
}

/// ハードウェアアクセラレーションを有効にします。変換時にちらつきが発生する問題を解決するために使用します。
/// @remarks これは既存のtransformプロパティを置き換えるか、置き換えられます。
/// @output transform
@mixin enable-hardware-3d {
	transform: translateZ(1px);
}

/// 非常に高い優先度を持つセレクタを宣言します。
/// @content 強化されたセレクタの下で定義を宣言します。
/// @output #{$enhanced-selector}
@mixin enhanced-selector {
	$enhanced-selector: string-repeat(":not(#\\#)", 10); // 優先度を強制的に上げるために使用します。

	#{$enhanced-selector} {
		&,
		&::before,
		&::after {
			@content;
		}
	}
}

/// 子要素に順次フェードインアニメーションを適用します。
/// @param {String} $selector - アニメーションさせる要素の唯一の親セレクタ。
/// @param {Number} $length - アニメーションさせる要素の最小数。
/// @param {Number} $duration - 個々の要素のアニメーション時間。
/// @param {Number} $delay - 各要素のアニメーション開始間隔。
/// @param {String} $ease - アニメーションのイージングカーブ。
/// @param {Number} $distance - 各要素のアニメーション移動距離。
/// @output
@mixin float-in-children($selector, $length, $duration: 600ms, $delay: 100ms, $ease: eases.$ease-out-expo, $distance: 200px) {
	@for $j from 1 through 2 {
		$placement: if($j == 1, top, bottom);
		$keyframes-name: if($j == 1, float-up, float-down);
		$direction: if($j == 1, 1, -1);
		$-selector: string-replace($selector, "$placement", "." + $placement);

		@for $i from 1 through $length {
			$delay-index: if($j == 1, $i, $length + 1 - $i);

			#{$-selector} > :nth-child(#{$i}) {
				animation: #{$keyframes-name} $duration #{$delay-index * $delay} $ease backwards;
			}
		}

		@keyframes #{$keyframes-name} {
			from {
				translate: 0 #{$direction * $distance};
				opacity: 0;
			}
		}
	}
}

/// 要素に最大幅と最大高さを設定し、画面外にはみ出さないようにします。
/// @output max-width, max-height
@mixin set-max-size {
	max-width: 100dvw;
	max-height: 100dvh;
}

/// スクロールバーを非表示にしますが、スクロールは可能です。
/// @output ::-webkit-scrollbar, width, height
@mixin no-scrollar {
	&::-webkit-scrollbar {
		@include square(0);
	}
}

/// 要素が空の場合は非表示にします。
/// @output :empty, display
@mixin hide-if-empty {
	&:empty {
		display: none;
	}
}
